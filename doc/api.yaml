openapi: 3.0.3
info:
  description: | 
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can
    upload your photos directly from your PC, and they will be visible to everyone following you.
  title: WASAPhoto
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: Login
  - name: UserInteraction
  - name: ProfileEdit
  - name: ManagePhotos
  - name: Stream
paths:
  /session:
    post:
      security: []
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        content:
          application/json:
            schema:
              description: JSON containing the username
              type: object
              properties:
                Username:
                  $ref: "#components/schemas/Username"
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: JSON containing the user's id
                type: object
                properties:
                  UserID:
                    $ref: "#components/schemas/UserId"
        '400': { $ref: "#/components/responses/BadRequest" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /users/search:
    parameters:
      - $ref: "#/components/parameters/Username"
    get:
      security: []
        tags: ["UserInteraction"]
        operationId: searchUserFromName
        summary: "Get the specified user's id"
        ##################################################





        #DA IMPLEMENTARE








        ##########################################
  /users/{UserID}/:
    parameters:
      - $ref: "#/components/parameters/UserID"
    get:
      security: []
      tags: ["UserInteraction"]
      operationId: getUserProfile
      summary: "Get the specified user's profile"
      description : |
        Returns the user's profile, containing the user photos, followers,
        followers, following and other informations.
      responses:
        '200':
          description: "User profile"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        '400': { $ref: "#/components/responses/BadRequest" }
        '404': { $ref: "#/components/responses/ResultNotFound" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /users/{UserID}/name:
    parameters:
      - $ref: "#/components/parameters/UserID"
    put:
      tags: ["ProfileEdit"]
      operationId: setMyUserName
      summary: "Edit the username"
      description : |
        Edit the user's username
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsernameRequest"
      responses:
        '204': { description: "Username saved successfully." }
        '400': { $ref: "#/components/responses/BadRequest" }
        '404': { $ref: "#/components/responses/ResultNotFound" }
        '409': { description: "Another user has this username." }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /users/{UserID}/followed/{OtherUserID}:
    parameters:
      - $ref: "#/components/parameters/UserID"
      - $ref: "#/components/parameters/OtherUserID"
    put:
      tags: ["UserInteraction"]
      operationId: followUser
      summary: Follow another user
      description : "Follow the user if it's not already followed, else do nothing"
      responses:
        '204': { description: "User followed successfully." }
        '400': { $ref: "#/components/responses/BadRequest" }
        '404': { $ref: "#/components/responses/ResultNotFound" }
        '409': { description: "The user is already followed, cannot proceed" }
        '500': { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["UserInteraction"]
      operationId: unfollowUser
      summary: Unfollow another user
      description : "Unfollow the user if it's followed, else do nothing"
      responses:
        '204': { description: "User unfollowed successfully." }
        '400': { $ref: "#/components/responses/BadRequest" }
        '404': { $ref: "#/components/responses/ResultNotFound" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /users/{UserID}/banned/{OtherUserID}:
    parameters:
      - $ref: "#/components/parameters/UserID"
      - $ref: "#/components/parameters/OtherUserID"
    put:
      tags: ["UserInteraction"]
      operationId: banUser
      summary: Ban another user
      description : "Hide the user if it's not already hidden, else do nothing"
      responses:
        '204': { description: "User banned successfully." }
        '400': { $ref: "#/components/responses/BadRequest" }
        '404': { $ref: "#/components/responses/ResultNotFound" }
        '409': { description: "The user is already banned, cannot proceed" }
        '500': { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["UserInteraction"]
      operationId: unbanUser
      summary: Unban another user
      description : "Unhide the user if it's hidden, else do nothing"
      responses:
        '204': { description: "User unbanned successfully" }
        '400': { $ref: "#/components/responses/BadRequest" }
        '404': { $ref: "#/components/responses/ResultNotFound" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /photos:
    put:
      tags: ["ManagePhotos"]
      operationId: uploadPhoto
      summary: Upload photo
      description : "Upload a photo owned by the user"
      requestBody:
        content:
          image/*:
            schema:
              description: The image to upload
              type: string
              format: binary
              pattern: '[\S\s]*'
              minLength: 0
              maxLength: 1000000000
      responses:
        '204': { description: "Image uploaded." }
        '400': { $ref: "#/components/responses/BadRequest" }
        '404': { $ref: "#/components/responses/ResultNotFound" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /photos/{PhotoID}:
    parameters:
      - $ref: "#/components/parameters/PhotoID"
    delete:
      tags: ["ManagePhotos"]
      operationId: deletePhoto
      summary: Delete photo
      description : "Delete a photo owned by the user"
      responses:
        '204': { description: "Image deleted." }
        '400': { $ref: "#/components/responses/BadRequest" }
        '404': { $ref: "#/components/responses/ResultNotFound" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /photos/{PhotoID}/likes/{UserID}:
    parameters:
      - $ref: "#/components/parameters/PhotoID"
      - $ref: "#/components/parameters/UserID"
    put:
      tags: ["UserInteraction"]
      operationId: likePhoto
      summary: Like a photo
      description : "Like a photo published by another user if it's not already liked, else do nothing"
      responses:
        '204': { description: "Liked the photo" }
        '400': { $ref: "#/components/responses/BadRequest" }
        '404': { $ref: "#/components/responses/ResultNotFound" }
        '409': { description: "The photo already has a like" }
        '500': { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["UserInteraction"]
      operationId: unlikePhoto
      summary: Unlike a photo
      description : "Unlike a photo published by another user if it's already liked, else do nothing"
      responses:
        '204': { description: "Unliked the photo" }
        '400': { $ref: "#/components/responses/BadRequest" }
        '404': { $ref: "#/components/responses/ResultNotFound" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /photos/{PhotoID}/comments/:
    parameters:
      - $ref: "#/components/parameters/PhotoID"
    put:
      tags: ["UserInteraction"]
      operationId: commentPhoto
      summary: Comment a photo
      description : "Comment a photo"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
      responses:
        '204': { description: "Commented the photo" }
        '400': { $ref: "#/components/responses/BadRequest" }
        '404': { $ref: "#/components/responses/ResultNotFound" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /photos/{PhotoID}/comments/{CommentID}:
    parameters:
      - $ref: "#/components/parameters/PhotoID"
      - $ref: "#/components/parameters/CommentID"
    delete:
      tags: ["UserInteraction"]
      operationId: uncommentPhoto
      summary: Uncomment a photo
      description : "Delete a comment under a photo"
      responses:
        '204': { description: "Uncommented the photo" }
        '400': { $ref: "#/components/responses/BadRequest" }
        '404': { $ref: "#/components/responses/ResultNotFound" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /stream:
    get:
      tags: ["Stream"]
      operationId: getMyStream
      summary: Get a user's stream
      description : "Get the user's stream"
      responses:
        '200':
          description: "User's stream"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
        '400': { $ref: "#/components/responses/BadRequest" }
        '404': { $ref: "#/components/responses/ResultNotFound" }
        '500': { $ref: "#/components/responses/InternalServerError" } 
components:
  schemas:
    UserProfile:
      type: object
      description: Contains the user photos, how many photos have been uploaded, the user's followers and following.
      properties:
        UserID:
          $ref: '#/components/schemas/UserID'
        Username:
          $ref: '#/components/schemas/Username'
        Photos:
          description: "Array of the users's photos"
          type: array
          minItems: 0
          maxItems: 10000
          items:
           $ref: "#/components/schemas/PhotoID"
        Followers:
          description: "Array of the users following the requester"
          type: array
          minItems: 0
          maxItems: 10000
          items:
            $ref: "#/components/schemas/UserProfileSimplified"
        Following:
          description: "Array of the users followed by the requester"
          type: array
          minItems: 0
          maxItems: 10000
          items:
            $ref: "#/components/schemas/UserProfileSimplified"
    UserProfileSimplified:
      description: "User profile containing the username with the ID"
      type: object
      properties:
        UserID:
          $ref: '#/components/schemas/UserID'
        Username:
          $ref: '#/components/schemas/Username'
    Stream:
      description: "JSON Containing the stream"
      type: object
      properties:
        photoArray:
          type: array
          description: "Contains photos from the requester's followings"
          minItems: 0
          maxItems: 300
          items:
           $ref: "#/components/schemas/PhotoID"
    CommentRequest:
      type: object
      description: "JSON ontaining the comment"
      properties:
        comment:
          type: string
          minLength: 1
          maxLength: 60000
          description: The comment
    UsernameRequest:
      type: object
      description: "JSON containing the username"
      properties:
        Username:
          $ref: "#/components/schemas/UserName"
    Username:
      type: string
      description: "The user's username"
      example: Samsey
      pattern: '^.*?$'
      minLength: 3
      maxLength: 16
    UserID:
      type: integer
      description: "User's numerical ID"
      example: 1
    PhotoID:
      type: integer
      description: "Photo's numerical ID"
  parameters:
    Username:
      schema:
        description: Username
        type: string
        example: Samsey
        pattern: '^.*?$'
        minLength: 3
        maxLength: 16
      name: UserID
      in: query
      required: true
      description: Username for search in query
    UserID:
      schema:
        description: Active User ID
        type: integer
        example: 1111111
        readOnly: true
      name: UserID
      in: path
      required: true
      description: Active User ID for parameter
    OtherUserID:
      schema:
        description: Other User ID
        type: integer
        example: 1
        readOnly: true
      name: OtherUserID
      in: path
      required: true
      description: Other User ID for parameter
    PhotoID:
      schema:
        description: Photo ID
        type: integer
        example: 1
        readOnly: true
      name: PhotoID
      in: path
      required: true
      description: Photo ID for parameter
    CommentID:
      schema:
        description: Comment ID
        type: integer
        example: 1
        readOnly: true
      name: CommentID
      in: path
      required: true
      description: Comment ID for parameter
  responses:
    ResultNotFound:
      description: The requested result has not been found.
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []